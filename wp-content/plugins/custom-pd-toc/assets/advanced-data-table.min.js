jQuery(function($) {
    // Helper: Parse tab-separated or CSV string into array of arrays
    function parseTableData(raw, delimiter = "\t") {
        if (!raw) return [];
        // Try to detect CSV (comma) or TSV (tab)
        if (raw.indexOf(",") > -1 && raw.indexOf("\t") === -1) {
            // Use PapaParse for CSV
            if (window.Papa) {
                var parsed = Papa.parse(raw.trim(), { skipEmptyLines: true });
                return parsed.data;
            }
        }
        // Default: tab-separated
        return raw.trim().split("\n").map(row => row.split(delimiter));
    }

    // Helper: Fetch and parse CSV file via AJAX
    function fetchCSV(url, callback) {
        $.ajax({
            url: url,
            dataType: "text",
            success: function(data) {
                if (window.Papa) {
                    var parsed = Papa.parse(data, { skipEmptyLines: true });
                    callback(parsed.data);
                } else {
                    callback(parseTableData(data, ","));
                }
            },
            error: function() {
                callback([]);
            }
        });
    }

    // Helper: Fetch and parse Google Sheets as CSV
    function fetchGoogleSheet(url, callback) {
        // Convert Google Sheets URL to CSV export URL
        var match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
        if (!match) return callback([]);
        var sheetId = match[1];
        var csvUrl = "https://docs.google.com/spreadsheets/d/" + sheetId + "/export?format=csv";
        fetchCSV(csvUrl, callback);
    }

    // Main: Initialize all advanced data tables
    $('.pd-adt-table').each(function() {
        var $container = $(this);
        var config = $container.data('table');
        if (!config) return;

        // Remove any previous table (for re-initialization)
        $container.find('table').remove();

        // Data source handling
        function renderTable(data) {
            if (!data || !data.length) {
                $container.html('<div class="pd-adt-empty">No data available.</div>');
                return;
            }
            // Build HTML table
            var html = '<table class="pd-adt-table-init"><thead><tr>';
            data[0].forEach(function(cell) {
                html += '<th>' + cell + '</th>';
            });
            html += '</tr></thead><tbody>';
            for (var i = 1; i < data.length; i++) {
                html += '<tr>';
                data[i].forEach(function(cell) {
                    // Auto-link URLs
                    cell = (typeof cell === "string") ? cell.replace(
                        /\b(https?:\/\/[^\s<]+)/g,
                        '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
                    ) : cell;
                    html += '<td>' + cell + '</td>';
                });
                html += '</tr>';
            }
            html += '</tbody></table>';
            $container.html(html);

            var dtOptions = {
                paging: !!config.pagination,
                searching: !!config.search,
                ordering: !!config.sort,
                responsive: true,
                dom: 'Bfrtip',
                buttons: []
            };
            if (config.export) {
                dtOptions.buttons.push('csvHtml5', 'excelHtml5');
            }
            // Inline editing (basic, client-side)
            if (config.inline_edit) {
                $container.on('click', 'td', function() {
                    var $td = $(this);
                    if ($td.find('input').length) return;
                    var val = $td.text();
                    var $input = $('<input type="text" style="width:100%;">').val(val);
                    $td.html($input);
                    $input.focus();
                    $input.on('blur', function() {
                        $td.text($input.val());
                    });
                    $input.on('keydown', function(e) {
                        if (e.key === 'Enter') $input.blur();
                    });
                });
            }
            var dt = $container.find('table').DataTable(dtOptions);
            // Move the search input out of the label and add a placeholder
            var $filter = $container.find('.dataTables_filter');
            var $label = $filter.find('label');
            var $input = $label.find('input[type="search"]');
            $input.attr('placeholder', 'Search');
            $label.replaceWith($input); // Replace the label with the input
        }

        // Load data based on source
        if (config.source === 'static' && config.table_raw) {
            renderTable(parseTableData(config.table_raw));
        } else if (config.source === 'csv' && config.csv_url) {
            fetchCSV(config.csv_url, renderTable);
        } else if (config.source === 'gsheet' && config.gsheet_url) {
            fetchGoogleSheet(config.gsheet_url, renderTable);
        } else {
            $container.html('<div class="pd-adt-empty">No data source selected.</div>');
        }
    });
});
